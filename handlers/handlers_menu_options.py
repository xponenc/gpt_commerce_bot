from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import *
from keyboards.keyboards import options_keyboard, get_speed_reply_keyboard, get_temperature_reply_keyboard, \
    get_audio_reply_keyboard, get_autopayments_reply_keyboard
from services.process_options import update_user_name, update_user_speed, update_user_temperature, update_user_audio, \
    update_user_auto_renewal, get_user_options


# –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
class OptionState(StatesGroup):
    choosing_option = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
    changing_name = State()  # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    changing_speed = State()  # –í—ã–±–æ—Ä –Ω–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–≤—É–∫–∞
    changing_temperature = State()  # –í—ã–±–æ—Ä –Ω–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    changing_audio_responses = State()  # –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–∞—Ö
    changing_autopayments = State()  # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Router, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
options_router = Router()


# /options *************************************************************************
@options_router.message(Command('options'))
async def cmd_options(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                         reply_markup=options_keyboard())
    await state.set_state(OptionState.choosing_option)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –∏–∑ get_options_keyboard()
@options_router.message(OptionState.choosing_option)
async def process_option(message: Message, state: FSMContext):
    if message.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏":
        options = await get_user_options(user_id=message.from_user.id)
        options_output = (f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏: {options.get("temperature")}\n"
                          f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {options.get("speed")}\n"
                          f"–ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–∞—Ö: {'–í–ö–õ' if options.get("audio") else '–û–¢–ö–õ'}\n"
                          f"–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏: {'–í–ö–õ' if options.get("autopayments") else '–û–¢–ö–õ'}\n"
                          )
        await message.answer(f"üìù –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏:\n{options_output}")
        await state.clear()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

    elif message.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        await state.set_state(OptionState.changing_name)

    elif message.text == "üéöÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞":
        await message.answer("üéöÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞:",
                             reply_markup=get_speed_reply_keyboard())
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        await state.set_state(OptionState.changing_speed)

    elif message.text == "üå°Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É":
        await message.answer("üå°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:",
                             reply_markup=get_temperature_reply_keyboard())
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        await state.set_state(OptionState.changing_temperature)

    elif message.text == "üéß –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–∞—Ö":
        await message.answer("üéß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Ç–∞—Ö:",
                             reply_markup=get_audio_reply_keyboard())
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–æ–≤
        await state.set_state(OptionState.changing_audio_responses)

    elif message.text == "üîÑ –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏":
        await message.answer("üîÑ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏?",
                             reply_markup=get_autopayments_reply_keyboard())
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
        await state.set_state(OptionState.changing_autopayments)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
                             reply_markup=options_keyboard())


@options_router.message(OptionState.changing_name)
async def change_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    new_name = message.text
    await update_user_name(user_id=message.from_user.id, new_name=new_name)
    await message.answer(f"–í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è: {new_name}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–≤—É–∫–∞
@options_router.message(OptionState.changing_speed)
async def change_speed(message: Message, state: FSMContext):
    new_speed = message.text
    try:
        new_speed = new_speed.split()[0]
        new_speed = float(new_speed)
        if 0.5 > new_speed or new_speed > 2.0:
            raise ValueError
        await update_user_speed(user_id=message.from_user.id, new_speed=new_speed)
        await message.answer(f"–°–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_speed}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    except ValueError:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ {new_speed}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.5 –¥–æ 2.0",
                             reply_markup=get_speed_reply_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@options_router.message(OptionState.changing_temperature)
async def change_temperature(message: Message, state: FSMContext):
    new_temperature = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    try:
        new_temperature = new_temperature.split()[0]
        new_temperature = float(new_temperature)
        if 0.0 > new_temperature or new_temperature > 2.0:
            raise ValueError
        await update_user_temperature(user_id=message.from_user.id, new_temperature=new_temperature)
        await message.answer(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_temperature}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    except ValueError:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ {new_temperature}, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0",
                             reply_markup=get_speed_reply_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Ç–∞—Ö
@options_router.message(OptionState.changing_audio_responses)
async def change_audio_responses(message: Message, state: FSMContext):
    audio_responses = message.text
    if "–≤–∫–ª—é—á–µ–Ω–æ" in audio_responses.lower():
        audio_responses = True
    elif "–≤—ã–∫–ª—é—á–µ–Ω–æ" in audio_responses.lower():
        audio_responses = False
    else:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
                             reply_markup=get_speed_reply_keyboard())
    await update_user_audio(user_id=message.from_user.id, new_audio=audio_responses)
    await message.answer(f"–ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–∞—Ö: {'–í–∫–ª' if audio_responses else '–û—Ç–∫–ª'}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                         reply_markup=ReplyKeyboardRemove())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
@options_router.message(OptionState.changing_autopayments)
async def change_autopayments(message: Message, state: FSMContext):
    autopayments = message.text
    if "–≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏" in autopayments.lower():
        autopayments = True
    elif "–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏" in autopayments.lower():
        autopayments = False
    else:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
                             reply_markup=get_autopayments_reply_keyboard())
    await update_user_auto_renewal(user_id=message.from_user.id, new_auto_renewal=autopayments)
    await message.answer(f"–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏: {'–í–∫–ª' if autopayments else '–û—Ç–∫–ª'}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                         reply_markup=ReplyKeyboardRemove())
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
